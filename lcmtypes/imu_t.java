/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package lcmtypes;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class imu_t implements lcm.lcm.LCMEncodable
{
    public long utime;
    public float gyro[];
    public float gyro_covariance[][];
    public float accel[];
    public float accel_covariance[][];
    public float orientation[];
    public float orientation_covariance[][];
 
    public imu_t()
    {
        gyro = new float[3];
        gyro_covariance = new float[3][3];
        accel = new float[3];
        accel_covariance = new float[3][3];
        orientation = new float[4];
        orientation_covariance = new float[4][4];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x936fa8e9ddd37b37L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(lcmtypes.imu_t.class))
            return 0L;
 
        classes.add(lcmtypes.imu_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeLong(this.utime); 
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.gyro[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            for (int b = 0; b < 3; b++) {
                outs.writeFloat(this.gyro_covariance[a][b]); 
            }
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.accel[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            for (int b = 0; b < 3; b++) {
                outs.writeFloat(this.accel_covariance[a][b]); 
            }
        }
 
        for (int a = 0; a < 4; a++) {
            outs.writeFloat(this.orientation[a]); 
        }
 
        for (int a = 0; a < 4; a++) {
            for (int b = 0; b < 4; b++) {
                outs.writeFloat(this.orientation_covariance[a][b]); 
            }
        }
 
    }
 
    public imu_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public imu_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static lcmtypes.imu_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        lcmtypes.imu_t o = new lcmtypes.imu_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.utime = ins.readLong();
 
        this.gyro = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.gyro[a] = ins.readFloat();
        }
 
        this.gyro_covariance = new float[(int) 3][(int) 3];
        for (int a = 0; a < 3; a++) {
            for (int b = 0; b < 3; b++) {
                this.gyro_covariance[a][b] = ins.readFloat();
            }
        }
 
        this.accel = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.accel[a] = ins.readFloat();
        }
 
        this.accel_covariance = new float[(int) 3][(int) 3];
        for (int a = 0; a < 3; a++) {
            for (int b = 0; b < 3; b++) {
                this.accel_covariance[a][b] = ins.readFloat();
            }
        }
 
        this.orientation = new float[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.orientation[a] = ins.readFloat();
        }
 
        this.orientation_covariance = new float[(int) 4][(int) 4];
        for (int a = 0; a < 4; a++) {
            for (int b = 0; b < 4; b++) {
                this.orientation_covariance[a][b] = ins.readFloat();
            }
        }
 
    }
 
    public lcmtypes.imu_t copy()
    {
        lcmtypes.imu_t outobj = new lcmtypes.imu_t();
        outobj.utime = this.utime;
 
        outobj.gyro = new float[(int) 3];
        System.arraycopy(this.gyro, 0, outobj.gyro, 0, 3); 
        outobj.gyro_covariance = new float[(int) 3][(int) 3];
        for (int a = 0; a < 3; a++) {
            System.arraycopy(this.gyro_covariance[a], 0, outobj.gyro_covariance[a], 0, 3);        }
 
        outobj.accel = new float[(int) 3];
        System.arraycopy(this.accel, 0, outobj.accel, 0, 3); 
        outobj.accel_covariance = new float[(int) 3][(int) 3];
        for (int a = 0; a < 3; a++) {
            System.arraycopy(this.accel_covariance[a], 0, outobj.accel_covariance[a], 0, 3);        }
 
        outobj.orientation = new float[(int) 4];
        System.arraycopy(this.orientation, 0, outobj.orientation, 0, 4); 
        outobj.orientation_covariance = new float[(int) 4][(int) 4];
        for (int a = 0; a < 4; a++) {
            System.arraycopy(this.orientation_covariance[a], 0, outobj.orientation_covariance[a], 0, 4);        }
 
        return outobj;
    }
 
}

