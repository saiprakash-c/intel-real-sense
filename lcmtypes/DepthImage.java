/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package lcmtypes;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class DepthImage implements lcm.lcm.LCMEncodable
{
    public long utime;
    public int width;
    public int height;
    public byte bytes_per_pixel;
    public int num_bytes;
    public byte pixel_data[];
    public float meters_per_unit;
 
    public DepthImage()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x578d85864e73bc44L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(lcmtypes.DepthImage.class))
            return 0L;
 
        classes.add(lcmtypes.DepthImage.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeLong(this.utime); 
 
        outs.writeInt(this.width); 
 
        outs.writeInt(this.height); 
 
        outs.writeByte(this.bytes_per_pixel); 
 
        outs.writeInt(this.num_bytes); 
 
        if (this.num_bytes > 0)
            outs.write(this.pixel_data, 0, num_bytes);
 
        outs.writeFloat(this.meters_per_unit); 
 
    }
 
    public DepthImage(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public DepthImage(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static lcmtypes.DepthImage _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        lcmtypes.DepthImage o = new lcmtypes.DepthImage();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.utime = ins.readLong();
 
        this.width = ins.readInt();
 
        this.height = ins.readInt();
 
        this.bytes_per_pixel = ins.readByte();
 
        this.num_bytes = ins.readInt();
 
        this.pixel_data = new byte[(int) num_bytes];
        ins.readFully(this.pixel_data, 0, num_bytes); 
        this.meters_per_unit = ins.readFloat();
 
    }
 
    public lcmtypes.DepthImage copy()
    {
        lcmtypes.DepthImage outobj = new lcmtypes.DepthImage();
        outobj.utime = this.utime;
 
        outobj.width = this.width;
 
        outobj.height = this.height;
 
        outobj.bytes_per_pixel = this.bytes_per_pixel;
 
        outobj.num_bytes = this.num_bytes;
 
        outobj.pixel_data = new byte[(int) num_bytes];
        if (this.num_bytes > 0)
            System.arraycopy(this.pixel_data, 0, outobj.pixel_data, 0, this.num_bytes); 
        outobj.meters_per_unit = this.meters_per_unit;
 
        return outobj;
    }
 
}

